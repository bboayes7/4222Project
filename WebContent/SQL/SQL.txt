drop table if exists Musician CASCADE;
drop table if exists Album CASCADE;
drop table if exists Instrument CASCADE;
drop table if exists Song CASCADE;
drop table if exists Playedby CASCADE;
drop table if exists performedby CASCADE;

CREATE TABLE Musician (
    ssn int PRIMARY KEY ,
    name varchar(255) NOT NULL,
    phone bigint NOT NULL,
    address varchar(255) NOT NULL,
    ifPoor boolean default true
);

CREATE TABLE Album (
    id SERIAL PRIMARY KEY ,
    albumId SERIAL NOT NULL,
    pSSN int  REFERENCES Musician (ssn) ON DELETE CASCADE ON UPDATE CASCADE,
    copyrightDate date NOT NULL,
    title varchar(255) NOT NULL,
    format varchar(255) NOT NULL
);

CREATE TABLE Instrument (
    id  SERIAL  PRIMARY KEY  ,
    name varchar(255) NOT NULL,
    musicalKey varchar(255) NOT NULL
);

CREATE TABLE Song(
    song_id  SERIAL  PRIMARY KEY,
    album_id int REFERENCES Album (id) ON DELETE CASCADE ON UPDATE CASCADE,
    title varchar(255) NOT NULL,
    artist varchar(255) NOT NULL


);

CREATE TABLE Playedby(
    Mssn int  REFERENCES Musician (ssn) ON DELETE CASCADE ON UPDATE CASCADE,
    Instrument_id int REFERENCES Instrument (id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE performedby(
    Mssn int  REFERENCES Musician (ssn) ON DELETE CASCADE ON UPDATE CASCADE,
    song_id int REFERENCES Song (song_id) ON DELETE CASCADE ON UPDATE CASCADE
);

insert into Musician values (012345678,'juan',123456789,'201 fake street',true);
insert into Album values (0,0,012345678,NOW(),'NUBMERONE','CD');
insert into Instrument values (1,'Bass','C4');
insert into Song values (0,0,'FIRST HIT','juan');
insert into Playedby values (012345678,1);
insert into performedby values (012345678,0);

DROP FUNCTION cd_album() ;
DROP FUNCTION total_songs() ;


CREATE OR REPLACE FUNCTION cd_Album ()
RETURNS float AS $total$
declare
	CD float;
	nonCD float;
	total float;
BEGIN
   SELECT count(*) into CD FROM Album where format = 'CD'; 
   SELECT count(*) into nonCD FROM Album;
   SELECT CD/nonCD *100 into total;

   RETURN total;
END;
$total$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION total_songs ()
RETURNS float AS $total$
declare
	
	total float;
BEGIN
   SELECT count(*) into total FROM Song; 

   RETURN total;
END;
$total$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION remove_album()
  RETURNS trigger AS
$$
declare
	
	total float;
BEGIN
   SELECT count(*) into total FROM Album where format = 'CD'; 


END;

$$
LANGUAGE 'plpgsql';

select cd_Album(), total_songs();


DROP FUNCTION remove_album()CASCADE;
DROP FUNCTION song_restrict()CASCADE;

CREATE OR REPLACE FUNCTION remove_album()
  RETURNS trigger AS
$$BEGIN
if  count(*) = 0 from Album 
INNER join Song on Album.id  = Song.album_id
where Album.id = OLD.album_id
then delete from Album where Album.id = OLD.album_id; 
end if;
RETURN NEW;

END;

$$
LANGUAGE 'plpgsql';

CREATE TRIGGER lastsongdelete
  AFTER DELETE
  ON Song
  FOR EACH ROW
EXECUTE PROCEDURE remove_album();

CREATE OR REPLACE FUNCTION song_restrict()
  RETURNS trigger AS
$$BEGIN
IF count(*) = 16 FROM Song
INNER JOIN Album ON Album.id = Song.album_id
WHERE Album.id = NEW.album_id
THEN DELETE FROM Song WHERE Song.song_id = NEW.song_id;
end if;
RETURN NEW;
END;

$$
LANGUAGE 'plpgsql';

CREATE TRIGGER maxsongs
  After INSERT
  ON Song
  FOR EACH ROW
  EXECUTE PROCEDURE song_restrict();



